<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>at.ITArchitects</groupId>
    <artifactId>JeditFX</artifactId>
    <version>1.0.7-SNAPSHOT</version>
    
    <description>JeditFX is a simple editor like notepad but support for very large files</description>

    <properties>        
        <main-class>at.itarchitects.jeditfx.App</main-class>        
        <app.name>JeditFX</app.name>        
        <maven.build.timestamp.format>yy.ww.WWkkmm</maven.build.timestamp.format>
        <app.version>1.0.7</app.version>        
        <jvm.modules>java.base,jdk.management,java.naming,java.sql,java.transaction.xa,java.xml,jdk.unsupported,java.management,java.datatransfer,java.desktop,java.security.jgss,java.xml.crypto,jdk.javadoc,javafx.media,javafx.controls,javafx.fxml,javafx.graphics,javafx.base,javafx.swing,jfx.incubator.richtext,java.logging,jdk.charsets,java.net.http,java.prefs,jdk.crypto.ec,jdk.crypto.cryptoki,jdk.localedata,java.compiler,jdk.net,java.instrument,java.scripting,java.rmi</jvm.modules>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>24</maven.compiler.source>
        <maven.compiler.target>24</maven.compiler.target>        
        <javafx.version>25-ea+18</javafx.version>
        <!-- unique UUID via https://www.uuidgenerator.net -->
        <windows.upgrade.uuid>3559e02e-f0f5-4bdf-ac71-a839a33f6b7e</windows.upgrade.uuid>
        <!-- This is used to set many user-visible fields in the Windows Installer. See win-jpackage.txt -->
        <windows.vendor>ITArchitects</windows.vendor>
    </properties>

    <dependencies>
        <!-- This dependency is a normal Maven dependency, here mainly as an example. It brings in other transitive
        dependencies as well. You can remove it from your project (unless you happen to need to generate test data.  -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.0.3</version>                       
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-core</artifactId>
            <version>12.2.0</version>            
        </dependency>        
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-javafx</artifactId>
            <version>12.2.0</version>            
        </dependency>        
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-themify-pack</artifactId>
            <version>12.2.0</version>            
        </dependency>
        <dependency>
            <groupId>org.kordamp.ikonli</groupId>
            <artifactId>ikonli-fontawesome-pack</artifactId>
            <version>12.2.0</version>
        </dependency>        
        <dependency>
            <groupId>org.fxmisc.richtext</groupId>
            <artifactId>richtextfx</artifactId>
            <version>0.10.7</version>
        </dependency> 
        <dependency>
            <groupId>com.github.albfernandez</groupId>
            <artifactId>juniversalchardet</artifactId>
            <version>2.3.2</version>
        </dependency>         

        <!-- This downloads the platform specific JavaFX libraries used by the project. -->
        <!-- For the final installable, the JavaFX dependencies are provided via modules, but by including these here
        they work nicely with with IDEs and other Maven plugins (e.g. the javafx:run). -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>                        
        </dependency>        
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>            
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>            
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>            
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>jfx-incubator-richtext</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>jfx-incubator-input</artifactId>
            <version>${javafx.version}</version>
        </dependency>        
    </dependencies>

    <build>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.1</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>detect</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>                        
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>                            
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>                
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.gluonhq</groupId>
                <artifactId>gluonfx-maven-plugin</artifactId>
                <version>1.0.26</version>
                <configuration>
                    <target>host</target>
                    <mainClass>${main-class}</mainClass>
                    <bundlesList></bundlesList>
                    <resourcesList></resourcesList>
                    <reflectionList></reflectionList>
                    <jniList></jniList>
                    <attachList></attachList>
                    <nativeImageArgs>
                        <arg>--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls</arg>                        
                    </nativeImageArgs>
                    <linkerArgs></linkerArgs>
                    <runtimeArgs></runtimeArgs>
                    <verbose>false</verbose>
                    <graalvmHome>/Library/Java/graalvm-java23-darwin-aarch64-gluon-23+25.1-dev/Contents/Home</graalvmHome>
                    <javaStaticSdkVersion></javaStaticSdkVersion>
                    <javafxStaticSdkVersion></javafxStaticSdkVersion>
                    <enableSWRendering>false</enableSWRendering>
                    <remoteHostName></remoteHostName>
                    <remoteDir></remoteDir>
                    <appIdentifier></appIdentifier>
                    <releaseConfiguration>
                        <!-- all targets -->
                        <packageType>app</packageType>
                        <description></description>
                        <vendor></vendor>
                        <!-- macOS -->
                        <macAppStore></macAppStore>
                        <macSigningUserName></macSigningUserName>
                        <macAppCategory></macAppCategory>
                        <!-- macOS/iOS -->
                        <bundleName>${app.name}</bundleName>
                        <bundleVersion>${app.version}</bundleVersion>
                        <bundleShortVersion>${app.version}</bundleShortVersion>
                        <providedSigningIdentity></providedSigningIdentity>
                        <providedProvisioningProfile></providedProvisioningProfile>
                        <skipSigning>true</skipSigning>
                        <!-- iOS Simulator -->
                        <simulatorDevice></simulatorDevice>
                        <!-- Android -->
                        <appLabel></appLabel>
                        <versionCode>1</versionCode>
                        <versionName>1.0</versionName>
                        <providedKeyStorePath>${android-keystore-path}</providedKeyStorePath>
                        <providedKeyStorePassword>${android-keystore-password}</providedKeyStorePassword>
                        <providedKeyAlias>${android-key-alias}</providedKeyAlias>
                        <providedKeyAliasPassword>${android-key-password}</providedKeyAliasPassword>
                    </releaseConfiguration>
                </configuration>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running -->
                        <!-- Usage: mvn clean javafx:run -->
                        <id>default-cli</id>                            
                        <configuration>
                            <mainClass>${main-class}</mainClass>
                            <options> 
                                <!-- <option>-agentlib:native-image-agent=config-output-dir=/Users/selfemp/MountPoints/Development/NetBeansProjects/JeditFX/JeditFX/res</option>  -->                                                                   
                                <option>-XX:+UseZGC</option>
                                <option>--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls</option>  
                                <option>--enable-native-access ALL-UNNAMED</option>                                
                                <option>--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED</option>  
                                <option>--add-exports=javafx.base/com.sun.javafx=ALL-UNNAMED</option>                                
                            </options>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Configuration for manual attach debugging -->
                        <!-- Usage: mvn clean javafx:run@debug -->
                        <id>debug</id>
                        <configuration>
                            <mainClass>${main-class}</mainClass>
                            <options>                                     
                                <option>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=localhost:8000</option>                                    
                                <option>-XX:+UseZGC</option>
                                <option>--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls</option>  
                                <option>--enable-native-access ALL-UNNAMED</option>                                
                                <option>--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED</option>  
                                <option>--add-exports=javafx.base/com.sun.javafx=ALL-UNNAMED</option>                                 
                            </options>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Configuration for automatic IDE debugging -->
                        <id>ide-debug</id>
                        <configuration>
                            <mainClass>${main-class}</mainClass>
                            <options>                                     
                                <option>-agentlib:jdwp=transport=dt_socket,server=n,address=${jpda.address}</option>                                    
                                <option>-XX:+UseZGC</option>
                                <option>--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls</option>  
                                <option>--enable-native-access ALL-UNNAMED</option>                                
                                <option>--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED</option>  
                                <option>--add-exports=javafx.base/com.sun.javafx=ALL-UNNAMED</option> 
                            </options>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- Configuration for automatic IDE profiling -->
                        <id>ide-profile</id>
                        <configuration>
                            <mainClass>${main-class}</mainClass>
                            <options>
                                <option>${profiler.jvmargs.arg1}</option>
                                <option>${profiler.jvmargs.arg2}</option>
                                <option>${profiler.jvmargs.arg3}</option>
                                <option>${profiler.jvmargs.arg4}</option>
                                <option>${profiler.jvmargs.arg5}</option> 
                                <option>-XX:+UseZGC</option>
                                <option>--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED --add-opens=javafx.graphics/javafx.scene=org.controlsfx.controls</option>  
                                <option>--enable-native-access ALL-UNNAMED</option>                                
                                <option>--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED</option>  
                                <option>--add-exports=javafx.base/com.sun.javafx=ALL-UNNAMED</option> 
                            </options>
                        </configuration>
                    </execution>
                </executions>                
            </plugin>            
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>                                      
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.9.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M5</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <reporting>
        <plugins>
            <!-- http://mojo.codehaus.org/versions-maven-plugin/version-rules.html -->
            <!-- This plugin is a utility to find outdated dependencies in your project. Just run mvn site and
           the resulting HTML reports in target/site will let you know what plugins and dependencies are out of date.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <processDependencyManagementTransitive>false</processDependencyManagementTransitive>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <!-- We use the built-in Maven profile activation system to set the platform property.
       These properties are then use to build the directory paths to the platform specific resources.
       It would be great if Maven automatically added the os family as a property by default
        -->
        <profile>
            <id>unix-active</id>
            <activation>
                <os>
                    <family>unix</family>
                </os>
            </activation>
            <properties>
                <platform>linux</platform>
            </properties>
        </profile>
        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <platform>win</platform>
            </properties>
        </profile>
        <profile>
            <id>mac-active</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <platform>mac</platform>
            </properties>
        </profile>
        <profile>
            <id>package</id>
            <build>
                <plugins>
                    <plugin>
                        <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                        <groupId>io.github.wiverson</groupId>
                        <artifactId>jtoolprovider-plugin</artifactId>
                        <version>1.0.34</version>
                        <executions>                    
                            <execution>
                                <id>jlink</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <toolName>jlink</toolName>
                                    <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                                    <modulePath>${project.basedir}/jmods/${os.detected.classifier}-javafx/javafx-jmods-${javafx.version}/
                                    </modulePath>
                                    <addModules>${jvm.modules}</addModules>
                                    <output>${project.build.directory}/jvm-image</output>
                                    <args>
                                        <arg>--strip-native-commands</arg>
                                        <arg>--no-header-files</arg>
                                        <arg>--strip-debug</arg>
                                        <arg>--no-man-pages</arg>
                                        <arg>--compress=zip-6</arg>
                                    </args>
                                </configuration>
                            </execution>                  
                            <execution>
                                <id>jpackage</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>java-tool</goal>
                                </goals>
                                <configuration>
                                    <toolName>jpackage</toolName>
                                    <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                                    <args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
